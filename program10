#include <stdio.h>

#define N_PROCESS 5
#define N_RESOURCE 3

void calculateNeedMatrix(int allocation[][N_RESOURCE], int max[][N_RESOURCE], int need[][N_RESOURCE], int available[]) {
    int i, j;
    for (i = 0; i < N_PROCESS; i++) {
        for (j = 0; j < N_RESOURCE; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
            if (need[i][j] < 0) {
                printf("Error: allocation exceeds maximum for process %d and resource %d\n", i, j);
                return;
            }
            if (need[i][j] > available[j]) {
                printf("Error: insufficient resources for process %d and resource %d\n", i, j);
                return;
            }
        }
    }
}

int main() {
    int allocation[N_PROCESS][N_RESOURCE] = {{1, 1, 2}, {2, 1, 2}, {3, 0, 1}, {0, 2, 0}, {1, 1, 2}};
    int max[N_PROCESS][N_RESOURCE] = {{5, 4, 4}, {4, 3, 3}, {9, 1, 3}, {8, 6, 4}, {2, 2, 3}};
    int available[N_RESOURCE] = {3, 3, 2};
    int need[N_PROCESS][N_RESOURCE];
    int i, j;

    calculateNeedMatrix(allocation, max, need, available);

    printf("Process\tAllocation\tMax\tNeed\n");
    for (i = 0; i < N_PROCESS; i++) {
        printf("P%d\t", i);
        for (j = 0; j < N_RESOURCE; j++) {
            printf("%d ", allocation[i][j]);
        }
        printf("\t\t");
        for (j = 0; j < N_RESOURCE; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\t");
        for (j = 0; j < N_RESOURCE; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    return 0;
}

output :

ERROR!
Error: insufficient resources for process 0 and resource 0
Process	Allocation	Max	Need
P0	1 1 2 		5 4 4 	4 0 0 
P1	2 1 2 		4 3 3 	0 0 0 
P2	3 0 1 		9 1 3 	0 0 0 
P3	0 2 0 		8 6 4 	0 0 0 
P4	1 1 2 		2 2 3 	0 0 0 
