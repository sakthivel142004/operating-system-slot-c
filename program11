#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    int pid1, pid2, pid3, pid4;

    pid1 = fork();  // create first child process
    if (pid1 == 0) {
        // code to print odd numbers
        printf("First child process - PID: %d\n", getpid());
        for (int i = 1; i <= 10; i += 2) {
            printf("%d ", i);
        }
        printf("\n");
        exit(0);
    }

    pid2 = fork();  // create second child process
    if (pid2 == 0) {
        // code to print even numbers
        printf("Second child process - PID: %d\n", getpid());
        for (int i = 2; i <= 10; i += 2) {
            printf("%d ", i);
        }
        printf("\n");
        exit(0);
    }

    pid3 = fork();  // create third child process
    if (pid3 == 0) {
        // code to print multiples of 3
        printf("Third child process - PID: %d\n", getpid());
        for (int i = 3; i <= 30; i += 3) {
            printf("%d ", i);
        }
        printf("\n");
        exit(0);
    }

    pid4 = fork();  // create fourth child process
    if (pid4 == 0) {
        // code to print multiples of 5
        printf("Fourth child process - PID: %d\n", getpid());
        for (int i = 5; i <= 50; i += 5) {
            printf("%d ", i);
        }
        printf("\n");
        exit(0);
    }

    // parent process waits for all child processes to complete
    waitpid(pid1, NULL, 0);
    waitpid(pid2, NULL, 0);
    waitpid(pid3, NULL, 0);
    waitpid(pid4, NULL, 0);

    return 0;
}

output:


First child process - PID: 1280
Second child process - PID: 1281
1 3 5 7 9 
Third child process - PID: 1282
2 4 6 8 10 
Fourth child process - PID: 1283
3 6 9 12 15 18 21 24 27 30 
5 10 15 20 25 30 35 40 45 50 
